name: Test iOS Artifact

on:
  repository_dispatch:
    types: [ trigger-ios-tests ]

jobs:
  run-tests:
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # 1) Select an Xcode version that includes iOS 18.1 simulator
      - name: Set Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          # Adjust if your environment uses a different stable/beta version that has iOS 18.1
          xcode-version: '16.1'

      - name: Show Xcode version and available runtimes
        run: |
          echo "Xcode info:"
          xcodebuild -version
          echo "Available iOS runtimes:"
          xcrun simctl list runtimes

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Create iOS Simulators
        id: create-simulators
        run: |
          # Create iPhone 15 Pro (iOS 18.0)
          IPHONE_15_PRO_UDID=$(xcrun simctl create \
            "iPhone 16" \
            "com.apple.CoreSimulator.SimDeviceType.iPhone-16" \
            "com.apple.CoreSimulator.SimRuntime.iOS-18-0")

          # Create iPhone 15 Pro Max (iOS 18.0)
          IPHONE_15_PRO_MAX_UDID=$(xcrun simctl create \
            "iPhone 16 Pro" \
            "com.apple.CoreSimulator.SimDeviceType.iPhone-16-Pro" \
            "com.apple.CoreSimulator.SimRuntime.iOS-18-0")

          echo "IPHONE_15_PRO_UDID=$IPHONE_15_PRO_UDID" >> $GITHUB_ENV
          echo "IPHONE_15_PRO_MAX_UDID=$IPHONE_15_PRO_MAX_UDID" >> $GITHUB_ENV
          
          # Boot the simulators
          xcrun simctl boot "$IPHONE_15_PRO_UDID"
          xcrun simctl boot "$IPHONE_15_PRO_MAX_UDID"

          # Print UDIDs for debugging
          echo "iPhone 15 Pro UDID: $IPHONE_15_PRO_UDID"
          echo "iPhone 15 Pro Max UDID: $IPHONE_15_PRO_MAX_UDID"

      - name: Download artifact from anytype-swift
        run: |
          # We retrieve the run_id from the "client_payload" that was sent.
          RUN_ID="${{ github.event.client_payload.run_id }}"
          echo "Run ID is: $RUN_ID"
          
          # 1) List artifacts in that run to find the artifact ID
          curl -sS \
               -H "Authorization: token ${{ secrets.ANYTYPE_PAT }}" \
               -H "Accept: application/vnd.github+json" \
               https://api.github.com/repos/anyproto/anytype-swift/actions/runs/$RUN_ID/artifacts \
               -o artifacts.json

          # This grabs the artifact ID for the artifact named "AnytypeIOS"
          ARTIFACT_ID=$(jq -r '.artifacts[] | select(.name=="AnytypeIOS") | .id' artifacts.json)
          echo "Found artifact ID: $ARTIFACT_ID"

          # 2) Download the artifact ZIP
          curl -sS -L \
               -H "Authorization: token ${{ secrets.ANYTYPE_PAT }}" \
               -H "Accept: application/vnd.github+json" \
               https://api.github.com/repos/anyproto/anytype-swift/actions/artifacts/$ARTIFACT_ID/zip \
               --output artifact.zip

          # 3) Unzip the artifact into the current workspace
          unzip artifact.zip

          # Print the location and contents
          echo "Current working directory: $(pwd)"
          echo "Listing unzipped contents:"
          ls -la

      - name: Install dependencies
        run: npm install

      - name: Setup Appium
        run: |
          # Install Appium CLI globally
          npm install -g appium
          # Start Appium server in background
          appium &

      - name: Run Tests
        env:
          IPHONE_A_UDID: ${{ env.IPHONE_15_PRO_UDID }}
          IPHONE_B_UDID: ${{ env.IPHONE_15_PRO_MAX_UDID }}
        run: npm run test:ios
