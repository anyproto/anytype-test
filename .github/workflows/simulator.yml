name: Test iOS Artifact (Debug)

on:
  workflow_dispatch:

jobs:
  run-tests:
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.1'

      - name: Show Xcode version and available runtimes
        run: |
          echo "Xcode info:"
          xcodebuild -version
          echo "Available iOS runtimes:"
          xcrun simctl list runtimes

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Create iOS Simulators
        id: create-simulators
        run: |
          # Create iPhone 16 (iOS 18.1)
          IPHONE_16_UDID=$(xcrun simctl create \
            "iPhone 16" \
            "com.apple.CoreSimulator.SimDeviceType.iPhone-16" \
            "com.apple.CoreSimulator.SimRuntime.iOS-18-1")

          # Create iPhone 16 Pro (iOS 18.1)
          IPHONE_16_PRO_UDID=$(xcrun simctl create \
            "iPhone 16 Pro" \
            "com.apple.CoreSimulator.SimDeviceType.iPhone-16-Pro" \
            "com.apple.CoreSimulator.SimRuntime.iOS-18-1")

          echo "IPHONE_16_UDID=$IPHONE_16_UDID" >> $GITHUB_ENV
          echo "IPHONE_16_PRO_UDID=$IPHONE_16_PRO_UDID" >> $GITHUB_ENV
          
          # Boot the simulators
          xcrun simctl boot "$IPHONE_16_UDID"
          xcrun simctl boot "$IPHONE_16_PRO_UDID"

          # Print UDIDs for debugging
          echo "iPhone 16 UDID: $IPHONE_16_UDID"
          echo "iPhone 16 Pro UDID: $IPHONE_16_PRO_UDID"

          # Wait a moment for them to finish booting
          sleep 5

          echo "===== Simulators after booting ====="
          xcrun simctl list devices

          echo "Checking the boot state of iPhone 16:"
          xcrun simctl list devices | grep "$IPHONE_16_UDID" || true

          echo "Checking the boot state of iPhone 16 Pro:"
          xcrun simctl list devices | grep "$IPHONE_16_PRO_UDID" || true

      - name: Download artifact from direct link (debug)
        run: |
          echo "Downloading artifact from direct link..."
          curl -sS -L \
               -H "Authorization: token ${{ secrets.ANYTYPE_PAT }}" \
               -H "Accept: application/vnd.github+json" \
               https://api.github.com/repos/anyproto/anytype-swift/actions/artifacts/2718333893/zip \
               --output artifact.zip

          unzip artifact.zip
          echo "Unzipped artifact contents:"
          ls -la

      - name: Install dependencies
        run: npm install

      - name: Setup Appium
        run: |
          npm install -g appium
          appium &

      - name: Run Tests
        env:
          IPHONE_A_UDID: ${{ env.IPHONE_16_UDID }}
          IPHONE_B_UDID: ${{ env.IPHONE_16_PRO_UDID }}
        run: |
          npm run test:ios

      # 1) Print out the Appium/WDI0 logs so you can see them in the job console
      - name: Show wdio-appium.log
        if: always()            # ensure this step runs even on failure
        run: |
          echo "=== wdio-appium.log content ==="
          if [ -f wdio-appium.log ]; then
            cat wdio-appium.log
          else
            echo "No wdio-appium.log found"
          fi

      # 2) Upload logs as an artifact you can download
      - name: Upload logs artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: appium-logs
          path: wdio-appium.log
