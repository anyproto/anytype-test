name: Test iOS Artifact (Debug)

on:
  workflow_dispatch:

jobs:
  run-tests:
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.1'

      - name: Show Xcode version and available runtimes
        run: |
          echo "Xcode info:"
          xcodebuild -version
          echo "Available iOS runtimes:"
          xcrun simctl list runtimes

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install
        
      - name: Install Appium & Run Appium Doctor
        run: |
          npm install -g appium
    
          # Also install appium-doctor explicitly (not automatically included in Appium 2.x)
          npm install -g appium-doctor
    
          # Check environment status for iOS, Android, etc.
          appium-doctor --ios


      - name: Create iOS Simulator
        id: create-simulator
        run: |
          # Example: iPhone 15 (iOS 17.2) -- pick an actual device+runtime from 'simctl list devicetypes'
          IPHONE_UDID=$(xcrun simctl create \
            "iPhone 15" \
            "com.apple.CoreSimulator.SimDeviceType.iPhone-15" \
            "com.apple.CoreSimulator.SimRuntime.iOS-17-2")

          echo "IPHONE_UDID=$IPHONE_UDID" >> $GITHUB_ENV

          xcrun simctl boot "$IPHONE_UDID"
          sleep 5
          xcrun simctl list devices

      - name: Download artifact from direct link (debug)
        run: |
          echo "Downloading artifact from direct link..."
          curl -sS -L \
               -H "Authorization: token ${{ secrets.ANYTYPE_PAT }}" \
               -H "Accept: application/vnd.github+json" \
               https://api.github.com/repos/anyproto/anytype-swift/actions/artifacts/2718333893/zip \
               --output artifact.zip

          unzip artifact.zip
          echo "Unzipped artifact contents:"
          ls -la

      - name: Setup Appium Service
        run: |
          # Start Appium server in background
          appium &

      - name: Run Tests
        env:
          IPHONE_UDID: ${{ env.IPHONE_UDID }}
        run: npm run test:ios

      # Print or upload your appium log after test
      - name: Show wdio-appium.log
        if: always()
        run: |
          echo "=== wdio-appium.log content ==="
          if [ -f wdio-appium.log ]; then
            cat wdio-appium.log
          else
            echo "No wdio-appium.log found"
          fi
