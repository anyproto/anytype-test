name: Test iOS Artifact (Debug)

on:
  workflow_dispatch:

jobs:
  run-tests:
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.1'

      - name: Show Xcode version and available runtimes
        run: |
          echo "Xcode info:"
          xcodebuild -version
          echo "Available iOS runtimes:"
          xcrun simctl list runtimes

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Download artifact from direct link (debug)
        run: |
          echo "Downloading artifact from direct link..."
          curl -sS -L \
               -H "Authorization: token ${{ secrets.ANYTYPE_PAT }}" \
               -H "Accept: application/vnd.github+json" \
               https://api.github.com/repos/anyproto/anytype-swift/actions/artifacts/2718333893/zip \
               --output artifact.zip

          unzip artifact.zip
          echo "Unzipped artifact contents:"
          ls -la

      - name: Create iOS Simulators
        id: create-simulators
        run: |
          # Create iPhone 15 (iOS 17.4)
          IPHONE_15_UDID=$(xcrun simctl create \
            "iPhone 15" \
            "com.apple.CoreSimulator.SimDeviceType.iPhone-15" \
            "com.apple.CoreSimulator.SimRuntime.iOS-17-4")

          # Create iPhone 15 Pro (iOS 17.4)
          IPHONE_15_PRO_UDID=$(xcrun simctl create \
            "iPhone 15 Pro" \
            "com.apple.CoreSimulator.SimDeviceType.iPhone-15-Pro" \
            "com.apple.CoreSimulator.SimRuntime.iOS-17-4")

          echo "IPHONE_15_UDID=$IPHONE_15_UDID" >> $GITHUB_ENV
          echo "IPHONE_15_PRO_UDID=$IPHONE_15_PRO_UDID" >> $GITHUB_ENV
          
          # Boot the simulators
          xcrun simctl boot "$IPHONE_15_UDID"
          xcrun simctl boot "$IPHONE_15_PRO_UDID"

          xcrun simctl bootstatus "$IPHONE_15_UDID"
          xcrun simctl bootstatus "$IPHONE_15_PRO_UDID"
        
          # Print UDIDs for debugging
          echo "iPhone 15 UDID: $IPHONE_15_UDID"
          echo "iPhone 15 Pro UDID: $IPHONE_15_PRO_UDID"

          # Wait a moment for them to finish booting
          sleep 5

          echo "===== Simulators after booting ====="
          xcrun simctl list devices

          echo "Checking the boot state of iPhone 15:"
          xcrun simctl list devices | grep "$IPHONE_15_UDID" || true

          echo "Checking the boot state of iPhone 15 Pro:"
          xcrun simctl list devices | grep "$IPHONE_15_PRO_UDID" || true

      - name: Install dependencies
        run: npm install

      - name: Install and launch the .app on simulator
        run: |
          set -x
          echo "Installing the .app on the simulator..."
          xcrun simctl install "$IPHONE_15_UDID" "./Anytype Dev.app"

          echo "Launching the .app on simulator..."
          xcrun simctl launch "$IPHONE_15_UDID" "io.anytype.app.dev"

          echo "App launched successfully (if you see no errors above)."

      - name: Setup Appium
        run: |
          npm install -g appium@2.12.0
          appium &

      - name: Run Tests
        env:
          IPHONE_A_UDID: ${{ env.IPHONE_15_UDID }}
          IPHONE_B_UDID: ${{ env.IPHONE_15_PRO_UDID }}
        run: |
          npm run test:ios:smoke

      - name: Show wdio-appium.log
        if: always()
        run: |
          echo "=== wdio-appium.log content ==="
          if [ -f wdio-appium.log ]; then
            cat wdio-appium.log
          else
            echo "No wdio-appium.log found"
          fi

      - name: Upload logs artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: appium-logs
          path: wdio-appium.log
