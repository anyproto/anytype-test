// Code generated by MockGen. DO NOT EDIT.
// Source: core/block/import/web/parsers/types.go

// Package mock_parsers is a generated GoMock package.
package parsers

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	model "github.com/anyproto/anytype-heart/pkg/lib/pb/model"
)

// MockParser is a mock of Parser interface.
type MockParser struct {
	ctrl     *gomock.Controller
	recorder *MockParserMockRecorder
}

// MockParserMockRecorder is the mock recorder for MockParser.
type MockParserMockRecorder struct {
	mock *MockParser
}

// NewMockParser creates a new mock instance.
func NewMockParser(ctrl *gomock.Controller) *MockParser {
	mock := &MockParser{ctrl: ctrl}
	mock.recorder = &MockParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParser) EXPECT() *MockParserMockRecorder {
	return m.recorder
}

// MatchUrl mocks base method.
func (m *MockParser) MatchUrl(url string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchUrl", url)
	ret0, _ := ret[0].(bool)
	return ret0
}

// MatchUrl indicates an expected call of MatchUrl.
func (mr *MockParserMockRecorder) MatchUrl(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchUrl", reflect.TypeOf((*MockParser)(nil).MatchUrl), url)
}

// ParseUrl mocks base method.
func (m *MockParser) ParseUrl(url string) (*model.SmartBlockSnapshotBase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseUrl", url)
	ret0, _ := ret[0].(*model.SmartBlockSnapshotBase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseUrl indicates an expected call of ParseUrl.
func (mr *MockParserMockRecorder) ParseUrl(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseUrl", reflect.TypeOf((*MockParser)(nil).ParseUrl), url)
}
