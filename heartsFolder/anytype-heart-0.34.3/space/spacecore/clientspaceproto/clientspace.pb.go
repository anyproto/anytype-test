// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: commonspace/clientspaceproto/protos/clientspace.proto

package clientspaceproto

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SpaceExchangeRequest struct {
	SpaceIds    []string     `protobuf:"bytes,1,rep,name=spaceIds,proto3" json:"spaceIds,omitempty"`
	LocalServer *LocalServer `protobuf:"bytes,2,opt,name=localServer,proto3" json:"localServer,omitempty"`
}

func (m *SpaceExchangeRequest) Reset()         { *m = SpaceExchangeRequest{} }
func (m *SpaceExchangeRequest) String() string { return proto.CompactTextString(m) }
func (*SpaceExchangeRequest) ProtoMessage()    {}
func (*SpaceExchangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e177bb890b80d5a1, []int{0}
}
func (m *SpaceExchangeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpaceExchangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpaceExchangeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpaceExchangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpaceExchangeRequest.Merge(m, src)
}
func (m *SpaceExchangeRequest) XXX_Size() int {
	return m.Size()
}
func (m *SpaceExchangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SpaceExchangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SpaceExchangeRequest proto.InternalMessageInfo

func (m *SpaceExchangeRequest) GetSpaceIds() []string {
	if m != nil {
		return m.SpaceIds
	}
	return nil
}

func (m *SpaceExchangeRequest) GetLocalServer() *LocalServer {
	if m != nil {
		return m.LocalServer
	}
	return nil
}

type SpaceExchangeResponse struct {
	SpaceIds []string `protobuf:"bytes,1,rep,name=spaceIds,proto3" json:"spaceIds,omitempty"`
}

func (m *SpaceExchangeResponse) Reset()         { *m = SpaceExchangeResponse{} }
func (m *SpaceExchangeResponse) String() string { return proto.CompactTextString(m) }
func (*SpaceExchangeResponse) ProtoMessage()    {}
func (*SpaceExchangeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e177bb890b80d5a1, []int{1}
}
func (m *SpaceExchangeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpaceExchangeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpaceExchangeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpaceExchangeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpaceExchangeResponse.Merge(m, src)
}
func (m *SpaceExchangeResponse) XXX_Size() int {
	return m.Size()
}
func (m *SpaceExchangeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SpaceExchangeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SpaceExchangeResponse proto.InternalMessageInfo

func (m *SpaceExchangeResponse) GetSpaceIds() []string {
	if m != nil {
		return m.SpaceIds
	}
	return nil
}

type LocalServer struct {
	Ips  []string `protobuf:"bytes,1,rep,name=Ips,proto3" json:"Ips,omitempty"`
	Port int32    `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (m *LocalServer) Reset()         { *m = LocalServer{} }
func (m *LocalServer) String() string { return proto.CompactTextString(m) }
func (*LocalServer) ProtoMessage()    {}
func (*LocalServer) Descriptor() ([]byte, []int) {
	return fileDescriptor_e177bb890b80d5a1, []int{2}
}
func (m *LocalServer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocalServer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LocalServer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LocalServer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalServer.Merge(m, src)
}
func (m *LocalServer) XXX_Size() int {
	return m.Size()
}
func (m *LocalServer) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalServer.DiscardUnknown(m)
}

var xxx_messageInfo_LocalServer proto.InternalMessageInfo

func (m *LocalServer) GetIps() []string {
	if m != nil {
		return m.Ips
	}
	return nil
}

func (m *LocalServer) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func init() {
	proto.RegisterType((*SpaceExchangeRequest)(nil), "clientspace.SpaceExchangeRequest")
	proto.RegisterType((*SpaceExchangeResponse)(nil), "clientspace.SpaceExchangeResponse")
	proto.RegisterType((*LocalServer)(nil), "clientspace.LocalServer")
}

func init() {
	proto.RegisterFile("commonspace/clientspaceproto/protos/clientspace.proto", fileDescriptor_e177bb890b80d5a1)
}

var fileDescriptor_e177bb890b80d5a1 = []byte{
	// 246 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x4d, 0xce, 0xcf, 0xcd,
	0xcd, 0xcf, 0x2b, 0x2e, 0x48, 0x4c, 0x4e, 0xd5, 0x4f, 0xce, 0xc9, 0x4c, 0xcd, 0x2b, 0x01, 0xb3,
	0x0b, 0x8a, 0xf2, 0x4b, 0xf2, 0xf5, 0xc1, 0x64, 0x31, 0xb2, 0xb8, 0x1e, 0x58, 0x48, 0x88, 0x1b,
	0x49, 0x48, 0x29, 0x8f, 0x4b, 0x24, 0x18, 0xc4, 0x70, 0xad, 0x48, 0xce, 0x48, 0xcc, 0x4b, 0x4f,
	0x0d, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x92, 0xe2, 0xe2, 0x00, 0x2b, 0xf0, 0x4c, 0x29,
	0x96, 0x60, 0x54, 0x60, 0xd6, 0xe0, 0x0c, 0x82, 0xf3, 0x85, 0xac, 0xb8, 0xb8, 0x73, 0xf2, 0x93,
	0x13, 0x73, 0x82, 0x53, 0x8b, 0xca, 0x52, 0x8b, 0x24, 0x98, 0x14, 0x18, 0x35, 0xb8, 0x8d, 0x24,
	0xf4, 0x90, 0x6d, 0xf2, 0x41, 0xc8, 0x07, 0x21, 0x2b, 0x56, 0x32, 0xe6, 0x12, 0x45, 0xb3, 0xaf,
	0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x15, 0x9f, 0x85, 0x4a, 0xc6, 0x5c, 0xdc, 0x48, 0x06, 0x0a, 0x09,
	0x70, 0x31, 0x7b, 0x16, 0xc0, 0x54, 0x81, 0x98, 0x42, 0x42, 0x5c, 0x2c, 0x05, 0xf9, 0x45, 0x25,
	0x60, 0xa7, 0xb0, 0x06, 0x81, 0xd9, 0x46, 0xa9, 0x5c, 0xdc, 0xce, 0x60, 0x17, 0x81, 0xed, 0x13,
	0x0a, 0xe3, 0xe2, 0x45, 0xb1, 0x58, 0x48, 0x11, 0xc5, 0xc1, 0xd8, 0x02, 0x41, 0x4a, 0x09, 0x9f,
	0x12, 0x88, 0xbb, 0x9d, 0xcc, 0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23,
	0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x4a,
	0x06, 0x5f, 0xf4, 0x24, 0xb1, 0x81, 0x29, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x45, 0x4d,
	0xe5, 0x5e, 0xc5, 0x01, 0x00, 0x00,
}

func (m *SpaceExchangeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpaceExchangeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpaceExchangeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LocalServer != nil {
		{
			size, err := m.LocalServer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClientspace(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SpaceIds) > 0 {
		for iNdEx := len(m.SpaceIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SpaceIds[iNdEx])
			copy(dAtA[i:], m.SpaceIds[iNdEx])
			i = encodeVarintClientspace(dAtA, i, uint64(len(m.SpaceIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SpaceExchangeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpaceExchangeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpaceExchangeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SpaceIds) > 0 {
		for iNdEx := len(m.SpaceIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SpaceIds[iNdEx])
			copy(dAtA[i:], m.SpaceIds[iNdEx])
			i = encodeVarintClientspace(dAtA, i, uint64(len(m.SpaceIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LocalServer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocalServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Port != 0 {
		i = encodeVarintClientspace(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Ips) > 0 {
		for iNdEx := len(m.Ips) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ips[iNdEx])
			copy(dAtA[i:], m.Ips[iNdEx])
			i = encodeVarintClientspace(dAtA, i, uint64(len(m.Ips[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintClientspace(dAtA []byte, offset int, v uint64) int {
	offset -= sovClientspace(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SpaceExchangeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SpaceIds) > 0 {
		for _, s := range m.SpaceIds {
			l = len(s)
			n += 1 + l + sovClientspace(uint64(l))
		}
	}
	if m.LocalServer != nil {
		l = m.LocalServer.Size()
		n += 1 + l + sovClientspace(uint64(l))
	}
	return n
}

func (m *SpaceExchangeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SpaceIds) > 0 {
		for _, s := range m.SpaceIds {
			l = len(s)
			n += 1 + l + sovClientspace(uint64(l))
		}
	}
	return n
}

func (m *LocalServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ips) > 0 {
		for _, s := range m.Ips {
			l = len(s)
			n += 1 + l + sovClientspace(uint64(l))
		}
	}
	if m.Port != 0 {
		n += 1 + sovClientspace(uint64(m.Port))
	}
	return n
}

func sovClientspace(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozClientspace(x uint64) (n int) {
	return sovClientspace(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SpaceExchangeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientspace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpaceExchangeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpaceExchangeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientspace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientspace
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientspace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpaceIds = append(m.SpaceIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalServer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientspace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientspace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClientspace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LocalServer == nil {
				m.LocalServer = &LocalServer{}
			}
			if err := m.LocalServer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientspace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClientspace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpaceExchangeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientspace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpaceExchangeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpaceExchangeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientspace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientspace
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientspace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpaceIds = append(m.SpaceIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientspace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClientspace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalServer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientspace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalServer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalServer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ips", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientspace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientspace
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientspace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ips = append(m.Ips, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientspace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClientspace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClientspace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClientspace(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClientspace
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClientspace
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClientspace
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthClientspace
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupClientspace
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthClientspace
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthClientspace        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClientspace          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupClientspace = fmt.Errorf("proto: unexpected end of group")
)
